//BIBLIOTEKI
#include <Adafruit_GFX.h> //biblioteka graficzna
#include<Adafruit_ST7735.h> //biblioteka dla drivera
#include<SPI.h> //biblioteka dla spi

//definicja pinów dla arduino
#define TFT_CS 10
#define TFT_RST 9
#define TFT_DC 8
//reszta pinów zgodnie z spi w arduino, back light niepodłaczone
#define left 7
#define right 6
#define rotate 5
#define speedUp 4
//utworzenie obiektu wysywietlacza
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
//zmienne i stałe
byte tetraminoLift = 0;
unsigned long frameTime = 0;
byte boardBorder = 1; //maksymalna granica do ktorej mozna ukladac kostki
byte oldTetraRow;
byte oldTetraCon;
byte pixelDimensions = 9; //szerokosc jednej kostki w pixelach
byte width = 128; //szerokosc wyswietlacza w pixelach
byte height = 160; //wysokosc wyswietlacza w pixelach
byte tetraRow = 0;
byte tetraCon = 0;
byte rightSide = 0;
byte leftSide = 0;
bool newLevel = 1;
byte topOffset[4];
byte bottomOffset[4];
byte leftOffset[4];
byte rightOffset[4];
byte board[16][12]; //tablica odwzorowujaca wyswietlacz, rozdzielczosc taka jak ekranu w "kostakach"
short int color[16][12]; //tablica zawierajaca informacje o kolorze kazdek kostki
short int actualColor;
byte boardCon = 5; //poczatkowe wspolrzedne
byte boardRow = 0; // -||-
byte futureBoardCon = 0;
byte hipoBoardRow = 0;
bool buttonLeft = 0;
bool buttonRight = 0;
bool buttonRotate = 0;
long addictionTime = 0;
long tetraTime = 410;
byte clickManager;
long clickTime = 610;
bool buttonSpeedUp = 0;
bool skip = 0;
//tetramina
byte cube     [2][2] =  {{1, 1}, {1, 1}};
byte stick    [1][4] =  {{1, 1, 1, 1}};
byte lRight   [2][3] =  {{0, 0, 1}, {1, 1, 1}};
byte lLeft    [2][3] =  {{1, 0, 0}, {1, 1, 1}};
byte podium   [2][3] =  {{0, 1, 0}, {1, 1, 1}};
byte sRight   [2][3] =  {{0, 1, 1}, {1, 1, 0}};
byte sLeft    [2][3] =  {{1, 1, 0}, {0, 1, 1}};

byte actualTetramino[4][4];
byte randomTetramino = 0;
byte lastTetramino[4][4];
void setup() {
  Serial.begin(9600);
  pinMode(left, INPUT_PULLUP);
  pinMode(right, INPUT_PULLUP);
  pinMode(rotate, INPUT_PULLUP);
  pinMode(speedUp, INPUT_PULLUP);
  Serial.begin(9600);
  //inicjacja wyświetlacza
  tft.initR();
  tft.fillScreen(0x6000); //tło tetrisa na początek 0x6000
  tft.setCursor(10, 50);
  tft.setTextColor(0x03FF);
  tft.setTextSize(3);
  tft.print("TETRIS");
  delay(3000);
  drawTetrisBoard(0xffff, 0);
  resetBoard();
  updateTetrisBoard(0xffff);


}
void loop() {
  drawTetramino(boardRow, boardCon);
  updateTetrisBoard(0xffff);
  skiP();
  moveRight();
  moveLeft();
  rotatE();
  if (((millis() - frameTime > tetraTime) && (millis() - addictionTime > clickTime)) || skip)
  {
    tetraminoFall();
    fullRow();
    gameOver();
    newTetramino();
    frameTime = millis();
  }
}

//reset
void(* resetFunc) (void) = 0;

void cleanTetramino()
{
  for (byte i = 0; i < tetraRow; i++)
  {
    for (byte j = 0; j < tetraCon; j++)
    {
      if (actualTetramino[i][j])
      {
        board[boardRow + i][boardCon + j] = 0;
      }
    }
  }
}

void updateTetrisBoard( short colorBoard)  //uaktualnia plansze gry
{
  for (byte i = 0; i < 16; i++)
  {
    for (byte j = 0; j < 12; j++)
    {
      if (board[i][j] == 1)
      {
        tft.fillRect(j * 10 + 1, i * 10 + 1, pixelDimensions, pixelDimensions, color[i][j]);
      }
      else
      {
        tft.fillRect(j * 10 + 1, i * 10 + 1, pixelDimensions, pixelDimensions, colorBoard);
      }
    }
  }
}

void resetBoard() //resetuje plansze do gry
{
  for (byte i = 0; i < 16; i++)
  {
    for (byte j = 0; j < 12; j++)
    {
      board[i][j] = 0;
    }
  }
}


void drawTetrisBoard(short colorBoard, short colorLine) //tworzy bazowa plansze do gry
{
  tft.fillScreen(colorBoard);
  for (byte i = 1; i < 13; i++)
  {
    tft.drawFastVLine(10 * i, 0, height, colorLine);
  }
  for (byte j = 1; j < 17; j++)
  {
    tft.drawFastHLine(0, 10 * j, width, colorLine);
  }
  tft.drawFastHLine(0, 20, width, 0x001f);
  tft.fillRect(121, 0, 7, 160, 0);
  tft.drawFastVLine(0, 0, height, colorLine);

}

void drawTetramino(byte row, byte con) //nadaje odpowiednim komorkom tablicy klackow i tablicy kolorow odpowiednie wartosci zgodnie z aktualnym klockiem i jego pozaycja na planszy
{
  for (byte i = 0; i < tetraRow; i++)
  {
    for (byte j = 0; j < tetraCon; j++)
    {
      if (actualTetramino[i][j] != 0)
      {
        board[i + row][j + con] = actualTetramino[i][j];
        color[i + row][j + con] = actualColor;
      }
    }
  }
}

void newTetramino() //losuje nowy klocek jesli poprzedni spadł
{
  if (newLevel)
  {
    //Serial.println("Początek");
    boardCon = 5;
    boardRow = 0;
    newLevel = 0;
    skip = 0; //wyłacza przyspieszone spadanie klocków
    //wyzerowanie licznika obrotów
    tetraminoLift = 0;
    long randomBoost = analogRead(A0);
    randomTetramino = random(0, randomBoost);
    randomTetramino = map(randomTetramino, 0, randomBoost, 0, 7);
    //przydział odpowiedniego tetramina
    if (randomTetramino == 0)
    {
      actualColor = 0xfac0;
      tetraRow = 2;
      tetraCon = 2;
      for (byte i = 0; i < tetraRow; i++)
      {
        for (byte j = 0; j < tetraCon; j++)
        {
          actualTetramino[i][j] = cube[i][j];
        }
      }
    }

    if (randomTetramino == 1)
    {
      actualColor = 0xf812;
      tetraRow = 1;
      tetraCon = 4;
      for (byte i = 0; i < tetraRow; i++)
      {
        for (byte j = 0; j < tetraCon; j++)
        {
          actualTetramino[i][j] = stick[i][j];
        }
      }
    }

    if (randomTetramino == 2)
    {
      actualColor = 0x02c0;
      tetraRow = 2;
      tetraCon = 3;
      for (byte i = 0; i < tetraRow; i++)
      {
        for (byte j = 0; j < tetraCon; j++)
        {
          actualTetramino[i][j] = podium[i][j];
        }
      }
    }

    if (randomTetramino == 3)
    {
      actualColor = 0x000c;
      tetraRow = 2;
      tetraCon = 3;
      for (byte i = 0; i < tetraRow; i++)
      {
        for (byte j = 0; j < tetraCon; j++)
        {
          actualTetramino[i][j] = lRight[i][j];
        }
      }
    }
    if (randomTetramino == 4)
    {
      actualColor = 0xf81f;
      tetraRow = 2;
      tetraCon = 3;
      for (byte i = 0; i < tetraRow; i++)
      {
        for (byte j = 0; j < tetraCon; j++)
        {
          actualTetramino[i][j] = lLeft[i][j];
        }
      }
    }

    if (randomTetramino == 5)
    {
      actualColor = 0x6000;
      tetraRow = 2;
      tetraCon = 3;
      for (byte i = 0; i < tetraRow; i++)
      {
        for (byte j = 0; j < tetraCon; j++)
        {
          actualTetramino[i][j] = sRight[i][j];
        }
      }
    }
    if (randomTetramino == 6)
    {
      actualColor = 0x001f;
      tetraRow = 2;
      tetraCon = 3;
      for (byte i = 0; i < tetraRow; i++)
      {
        for (byte j = 0; j < tetraCon; j++)
        {
          actualTetramino[i][j] = sLeft[i][j];
        }
      }
    }
    calculateOffset();
  }
}

void rotatE() //obraca klocki
{
  if (digitalRead(rotate) == 0 && buttonRotate == 0)
  {
    //opoznienie pokliknieciu
    if (clickManager < 5)
    {
      addictionTime = millis();
      clickManager++;
    }
    //zwiększanie addictionTime
     cleanTetramino();
    //calculating if rotation i possible
    futureBoardCon = boardCon;
    bool leftBoarder = 0;
    byte rightSide = 0;
    byte rotationSpace = 0;
    byte leftSide = 0;
    byte topSide = 0;
    byte actualInBoard = 0;
    byte futureInBoard = 0;
    if (tetraRow > tetraCon) 
    {
     
      for(byte i = 0; i < tetraRow/2; i++) //przesuniecie board Con w lewo dla bardziej naturalnego obrotu
      { 
         for (byte i = 0; i < tetraCon; i++)
        {
          leftSide += board[boardRow + i][futureBoardCon - 1];
        }
        if(!leftSide && futureBoardCon)
        {
        futureBoardCon--;
        }                      
     }
        leftSide = 0;
      while ((!actualInBoard && !leftSide) || (!leftSide && rotationSpace) || (!rightSide && rotationSpace))
      {       
        rotationSpace = 0;
        if (futureBoardCon + tetraRow - 1 < width / 10)
        {
          actualInBoard = 1;
        }
         if (futureBoardCon + tetraRow < width / 10)
        {
          futureInBoard = 1;
        }
        for (byte i = 0; i < tetraCon; i++)
        {
         leftSide += board[boardRow + i][futureBoardCon - 1];
        } 
        if(!futureBoardCon)
        {
          leftSide = 1;
          }
        for (byte i = 0; i < tetraCon; i++)
        {
          rightSide += board[boardRow + i][futureBoardCon + tetraRow];
        }
        if(futureBoardCon + tetraRow == width/10)
        {
          rightSide = 1;
        }
        for (byte i = 0; i < tetraCon; i++)
        {
          for (byte j = 0; j < tetraRow; j++)
          {
            rotationSpace += board[boardRow + i][futureBoardCon + j];
          }
        }
        if ((!actualInBoard && !leftSide) || (!leftSide && rightSide && rotationSpace))
        {
          futureBoardCon--;
        }
       else if(futureInBoard && leftSide && !rightSide && rotationSpace)
       {
        futureBoardCon++;
        }              
      }
    }

    if (tetraCon > tetraRow)
    {
      for(byte i = 0; i < tetraCon/2; i++) //przesuniecie board Con w prawo dla bardziej naturalnego obrotu
      {
        futureBoardCon++;                      
       }
      while (((!actualInBoard && !topSide) || (!topSide && rotationSpace))  && tetraminoLift < 5)
      {
        rotationSpace = 0;
        if (boardRow + tetraCon - 1 < height / 10)
        {
          actualInBoard = 1;
        }
        for (byte i = 0; i < tetraRow; i++)
        {
          for (byte j = 0; j < tetraCon; j++)
          {
            rotationSpace += board[boardRow + j][futureBoardCon + i];
          }
        }
        for (byte i = 0; i < tetraCon; i++)
        {
          topSide += board[boardRow + topOffset[i] - 1][futureBoardCon + i];
        }
        if (((!actualInBoard && !topSide) || (!topSide && rotationSpace)) && boardRow)
        {
          boardRow--;
          tetraminoLift++;
        }
      }
    }
    if (!rotationSpace && actualInBoard)
    {
      boardCon = futureBoardCon;
      byte buff[4][4]; //tablica buffor
      for (byte i = 0; i < 4; i++)
      {
        for (byte j = 0; j < 4; j++)
        {
          buff[i][j] = actualTetramino[i][j]; //przenienie actual tetramina do buffora
        }
      }
      byte smallBuffor[4];
      for (byte i = 0; i < 4; i++)
      {
        for (byte j = 0; j < 4; j++)
        {
          smallBuffor[j] = buff[j][i]; //kopiowanie kolumny buffora do smallBuff
        }

        for (byte e = 0; e < 4; e++)
        {
          actualTetramino[i][e] = smallBuffor[3 - e]; //kolumna buffora kopiowana do rzedzu actualTetramino
        }
      }
      //przesunięcie o odpowiednia wartosc w lewo
      byte dragLeft = 4 - tetraRow;
      for (byte i = 0; i < 4; i++)
      {
        for (byte j = 0; j < 4; j++)
        {
          buff[i][j] = actualTetramino[i][j]; //przenienie actual tetramina do buffora
        }
      }

      for (byte i = 0; i < 4; i++)
      {
        for (byte j = 0; j < 4; j++)
        {
          actualTetramino[i][j] = buff[i][j + dragLeft]; //przesunięcie w lewo o odpowiednia wartość
        }
      }
      //swap tetraRow i tetraCon
      byte handyBuff = tetraCon;
      tetraCon = tetraRow;
      tetraRow = handyBuff;

      //obliczenie offsetów
      calculateOffset();
      buttonRotate = 1;
    }
  }
  if (digitalRead(rotate) == 1 && buttonRotate == 1)
  {
    buttonRotate = 0;
  }
}

void tetraminoFall() //funkcja odpowiedzialna za spadanie klockow w doł, oraz wykrywanie kiedy klocke juz spadł
{
  bool isInBoard = 0;
  byte emptyPlace = 0;

  if (clickManager == 5)
  {
    clickManager = 0;
  }

  if (boardRow + tetraRow < height / 10)
  {
    isInBoard = 1;
  }
  for (byte i = 0; i < tetraCon; i++)
  {
    emptyPlace += board[boardRow + tetraRow - bottomOffset[i]][boardCon + i];
  }
  if (!emptyPlace && isInBoard)
  {
    cleanTetramino();
    boardRow++;
  }
  else
  {
    newLevel = 1;
  }
}

void moveRight() //rusza kostka w prawo jesli to mozliwe
{
  byte enoughSpace = 0;
  if (digitalRead(right) == LOW && buttonRight == 0)
  {
    tetraminoLift = 0;
    //opoznienie pokliknieciu
    if (clickManager < 5)
    {
      addictionTime = millis();
      clickManager++;
    }
    cleanTetramino();
    for (byte i = 0; i < tetraRow; i++)
    {
      rightSide += board[boardRow + i][boardCon + tetraCon - rightOffset[i]];
    }
    if (boardCon + tetraCon < width / 10)
    {
      enoughSpace = 1;
    }
    if (enoughSpace && !rightSide && boardCon + tetraCon < width/10)
    {
      cleanTetramino();
      boardCon++;
    }
    rightSide = 0;
    buttonRight = 1;
  }
  if (digitalRead(right) == HIGH && buttonRight == 1)
  {
    buttonRight = 0;
  }
}


void moveLeft() //to samo co wyzej tylko w lewo
{

  if (digitalRead(left) == LOW && buttonLeft == 0)
  {
    tetraminoLift = 0;
    //opoznienie pokliknieciu
    if (clickManager < 5)
    {
      addictionTime = millis();
      clickManager++;
    }
    cleanTetramino();
    for (byte i = 0; i < tetraRow; i++)
    {
      leftSide += board[boardRow + i][boardCon - 1 + leftOffset[i]];
    }

    if (boardCon != 0 && !leftSide)
    {
      cleanTetramino();
      boardCon--;
    }
    leftSide = 0;
    buttonLeft = 1;
  }
  if (digitalRead(left) == HIGH && buttonLeft == 1)
  {
    buttonLeft = 0;
  }
}

void gameOver()//sprawdza czy gracz nie przegrał
{
  if (newLevel)
  {
    byte topRow = 0;
    for (byte i = 0; i < 12; i++)
    {
      topRow += board[boardBorder][i];
    }
    if (topRow) //jesli rózne od zera
    {
      resetFunc();
    }
  }
}

void fullRow() //odpowiada ze przesuwanie klockow w dół jesli rzad zostal zapelniony
{
  if (newLevel)
  {
    byte checkRow = 15;
    while (checkRow > boardBorder) //dopóki check row jest różny od zera
    {
      byte full = 1;
      for (byte i = 0; i < width / 10; i++)
      {
        full *= board[checkRow][i];
      }

      if (full) //jesli rzad jest pełny to przewin plansze w dól
      {
        //przyspieszenie gry
        if (tetraTime > 90)
        {
          tetraTime -= 10;
          clickTime -= 5;
        }
        for (byte i = checkRow; i > 0; i--)
        {
          for (byte j = 0; j < width / 10; j++)
          {
            board[i][j] = board[i - 1][j];
            color[i][j] = color[i - 1][j];
          }
        }
      }
      if (!full) //jesli rzad nie był pełny sprawdz kolejny, jesli był to plansza zostala przewinieta wiec nalezy sprawdzić ten sam jeszce raz
      {
        checkRow--;
      }
    }
  }
}

void calculateOffset() //kazdy klocek jest reprezontowany jako prostokat o odpowiednich wymiarach, jednak aby uzykac prawdziwy kształ klocka musimy obliczyc wciecia w tym prostokacie
{
  byte safeSpace[6][6];
  for (byte i = 0; i < 4; i++)
  {
    for (byte j = 0; j < 4; j++)
    {
      safeSpace[1 + i][1 + j] = actualTetramino[i][j];
    }
  }

  for (byte i = 0; i < 4; i++)
  {
    bottomOffset[i] = 0;
    topOffset[i] = 0;
    leftOffset[i] = 0;
    rightOffset[i] = 0;
  }
  //obliczanie offsetów
  //bottom offset
  for (byte i = 0; i < tetraCon; i++)
  {
    while (!safeSpace[tetraRow - bottomOffset[i]][i + 1])       //jesli pixel jest równy zero
    {
      bottomOffset[i]++;
    }
  }
  for (byte i = 0; i < tetraCon; i++)
  {
    while (!safeSpace[1 + topOffset[i]][i + 1])       //jesli pixel jest równy zero
    {
      topOffset[i]++;
    }
  }
  //rightOffset
  for (byte i = 0; i < tetraRow; i++)
  {
    while (!safeSpace[i + 1][tetraCon - rightOffset[i]])
    {
      rightOffset[i]++;
    }
  }
  //leftOffset
  for (byte i = 0; i < tetraRow; i++)
  {
    while (!safeSpace[i + 1][1 + leftOffset[i]])
    {
      leftOffset[i]++;
    }
  }
}
void controlTime()//kontroluje opoznienie powodowane kliknieciem
{
  if (clickManager < 5)
  {
    addictionTime = millis();
    clickManager++;
  }
  if (digitalRead(rotate) == 1 && buttonRotate == 1)
  {
    buttonRotate = 0;
  }

  if (digitalRead(left) == 0 && buttonLeft == 0)
  {
    addictionTime = millis();
    clickManager++;
    buttonLeft = 1;
  }
  if (digitalRead(left) == 1 && buttonLeft == 1)
  {
    buttonLeft = 0;
  }

  if (digitalRead(right) == 0 && buttonRight == 0)
  {
    addictionTime = millis();
    clickManager++;
    buttonRight = 1;
  }
  if (digitalRead(right) == 1 && buttonRight == 1)
  {
    buttonRight = 0;
  }
}
//resetowanie clickManagera w funjci tetramino fall

void skiP()//odpowiada za przyspieszone spadanie klocków
{
  if (digitalRead(speedUp) == 0 && buttonSpeedUp == 0)
  {
    skip = 1; //włacza przyspieszone spadanie klocków na czas wcisniecia
    buttonSpeedUp = 1;
  }
  if (digitalRead(speedUp) == 1 && buttonSpeedUp == 1)
  {
    skip = 0;
    buttonSpeedUp = 0;
  }
}
